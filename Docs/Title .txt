Title 
"PentaPanes" Class for using a 5 Panes GUI window. 

Description
When I tried to write a big LabView commercial software I encountered the following issues:

I had many actions, settings, parameters etc. requiring many many controls and indicators and it was very hard to figure how to place them in a way that keeps the FrontPanel uncluttered (so as to not intimidate users with a messy confusing interface), has a logical meaning (e.g. grouped by functionality), is not wasteful of precious front panel area and still contains all the options and possiblity needed.

I needed a possibility to have restricted GUI areas accessible only to developers (e.g. debugging indicators, factory settings) or advanced user.

I had problems making sure certain elements (like graphs) will correctly change size when the FP window is resized while other controls needed to keep the same size. trying to use LabView's built-in solution didn't seem to work as well as can be expected.

I also needed to be able to see several graphs side by side in one window for comparison. 

At times I wanted my GUI windows to not have that specific "LabView" feel. 


In order to solve all those issues to my satisfaction I wrote the pentapane.lvclass. and this is a demonstation of it.  

What the object does is handle the PentaPane window (a FP window composed of 5 panes created by 4 splitters) automatically while giving the developer methods to open, close and resize panes, change the layout and resizing behaviours of controls and 

By using this class (or this demo as a template) you can have a GUI window starting point with all those issues taken care of so you can go straight to working on the actual functionality of your software.

I hope many of you will find this example useful and that it'll save you a lot of time and effort. 



How to Use



In order to use the Demo just run the 5PanesDemo.vi. 

In order to use the object 

build appropriate FP (two horizontal splitters and then in the middle pane two vertical splitters) 


Init 
use Init5Panes.vi method to initiate the object. 



Register objects
use RegisterGUIObjectToResize.vi method to register controls and indicators by using their reference and behaviour. 


Use resize objects in panes in "Pane size" event. 
use ResizeObjectsinPane.vi method in "Pane size" event


if you want to change the layout you may re-register objects. 


in case you want to use several pane instances (several version of panes) you can use ChangePaneOrigintoPaneInstance set the origin of the Pane to the origin of the instance to view. 


Shutdown the object before the FP closes. 
Shutdown using ShutDown5Panes.vi method





Additional Information

Since I wanted to demonstrate how this class can handles arrays I used an image array names "Icons" as icons buttons.  

load image array ("Icons") from file. 

added a "Icons:mouse down" event which finds which icons was pressed, and by what mouse button and acts accordingly. 
icons can be used as "Latch action" or "Switch action" buttons. 

In this demo only two icons actually do anything - 
icon #18 "log" button is a switch action button that shows and hide the bottom log pane
icon #9 "zoom-to-actual-size" button is a latch action button that autoscales all graphs. 
 

